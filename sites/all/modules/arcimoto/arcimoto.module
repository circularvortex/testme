<?php
// $Id$


define('ARCIMOTO_DOLLARS_PER_GALLON',   3.00);  // $3.00 average for OR, WA and CA
define('ARCIMOTO_MILES_PER_DAY',        25);    // 33 miles per day - national average
define('ARCIMOTO_MILES_PER_GALLON',     22.1);  // 31.2 mpg - national new passenger car mpg for 2008
define('ARCIMOTO_DOLLARS_PER_KWH',      0.10);  // $0.08175 - OR, WA residential average.  CA increases the average (to 0.1186) so it's not included for now.
/*
Here is state by state:
$0.0864 -- OR
$0.0771 -- WA
$0.147 -- CA
*/

define('ARCIMOTO_KWH_PER_MILE_PULSE',   .2);


drupal_add_js(drupal_get_path('module', 'jquery_ui') .'/jquery.ui/ui/jquery-ui-1.7.3.custom.js');

function arcimoto_init() {
  drupal_add_css(drupal_get_path('module', 'arcimoto') .'/arcimoto.css');
  
  jquery_ui_add('ui.progressbar');
}


function arcimoto_block($op = 'list', $delta = 3818, $edit = array()) {
  $block_id = 3818;
  // The $op parameter determines what piece of information is being requested.
  switch ($op) {
    case 'list':

      // If $op is "list", we just need to return a list of block descriptions.
      // This is used to provide a list of possible blocks to the administrator,
      // end users will not see these descriptions.
      $blocks[$block_id] = array(
        'info'       => t('Arcimoto: Calculator Block'),
      );
      return $blocks;
    case 'configure':
      // If $op is "configure", we need to provide the administrator with a
      // configuration form. The $delta parameter tells us which block is being
      // configured. In this example, we'll allow the administrator to customize
      // the text of the first block.
      $form = array();
      if ($delta == $block_id) {
        // All we need to provide is a text field, Drupal will take care of
        // the other block configuration options and the save button.
        $form['arcimoto_calc_block_description'] = array(
          '#type' => 'textfield',
          '#title' => t('Block description'),
          '#size' => 60,
          '#description' => t('This string will appear in the example block.'),
          '#default_value' => variable_get('arcimoto_calc_block_description',  t('Save money')),
        );
      }
      return $form;
    case 'save':
      // If $op is "save", we need to save settings from the configuration form.
      // Since the first block is the only one that allows configuration, we
      // need to check $delta to make sure we only save it.
      if ($delta == $block_id) {
        // Have Drupal save the string to the database.
        variable_set('arcimoto_calc_block_description', $edit['arcimoto_calc_block_description']);
      }
      return;
    case 'view': default:
      // If $op is "view", then we need to generate the block for display
      // purposes. The $delta parameter tells us which block is being requested.
      switch ($delta) {
        case $block_id:
          // The subject is displayed at the top of the block. Note that it
          // should be passed through t() for translation.
          $block['subject'] = t('Calculate Savings');
          // The content of the block is typically generated by calling a custom
          // function.
          $block['content'] = arcimoto_calc_block_contents();
          break;
      }
      return $block;
  }
}







function arcimoto_calc_block_contents() {
  $output = '';
  $output .= '<div id="calculator-form-results"></div>';
  $output .= drupal_get_form('arcimoto_calculator_form');
  return $output;
}

/**
* callback function for arcimoto/ajax
* The return HTML will be outputted by AHAH
*/

/*function arcimoto_ajax() {
  $data = arcimoto_calculate_savings();
  return drupal_json(array('status' => TRUE, 'data' => "Hello Drupal World"));;
}*/

function arcimoto_ajax() {
  // Build our new form element.
  $form_element = null;

  
  
// Build the new form.
  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Add the new element to the stored form. Without adding the element to the
  // form, Drupal is not aware of this new elements existence and will not
  // process it. We retreive the cached form, add the element, and resave.
  if (!$form = form_get_cache($form_build_id, $form_state)) {
    exit();
  }
  form_set_cache($form_build_id, $form, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );
  
  // Rebuild the form.
  $form = form_builder($_POST['form_id'], $form, $form_state);

  // Poor validation:
  $valid_submission = true;
  if(!empty($form['dollars_per_gallon']['#value']) ||
      !empty($form['miles_per_period']['#value']) ||
      !empty($form['dollars_per_gallon']['#value']) ||
      !empty($form['dollars_per_gallon']['#value'])) {
    if(!is_numeric($form['dollars_per_gallon']['#value']) ||
        !is_numeric($form['miles_per_period']['#value']) ||
        !is_numeric($form['dollars_per_gallon']['#value']) ||
        !is_numeric($form['dollars_per_gallon']['#value'])) {
      $valid_submission = false;
      drupal_set_message('All fields must be numeric. Try again.', 'error');
    }
  } else {
    // One is empty
    $valid_submission = false;
    drupal_set_message('All fields must be filled. Try again.', 'error');
  }
  
  //Calculate savings
  $savings_output = '';
  if($valid_submission) {
    $savings_per_day = arcimoto_calculate_savings_per_day(
          $form['dollars_per_gallon']['#value'], 
          $form['miles_per_period']['#value'], 
          $form['current_miles_per_gallon']['#value'], 
          $form['dollars_per_kwh']['#value']
        );
    //$savings_per_day = money_format('%i', $savings_per_day);
    
    $savings_per_year = $savings_per_day * 365;
    
    $savings_per_year = _money_format($savings_per_year);

    
    
    $savings_output = '<div id="savings_output">'.'$'.$savings_per_year.' per year</div>';
    drupal_set_message($savings_output, 'status');
  }

  // Render the new output.
  $new_form = $form[$name];
  
  // Render the new output.
  $output = '<div id="console">'.theme('status_messages').'</div>' . drupal_render($new_form);

  drupal_json(array('status' => TRUE, 'data' => $output));
}


/**
 * Do the actual calcuation for the savings
 */
function arcimoto_calculate_savings_per_day(
      $dollars_per_gallon = ARCIMOTO_DOLLARS_PER_GALLON,
      $miles_per_period = ARCIMOTO_MILES_PER_DAY,
      $current_miles_per_gallon = ARCIMOTO_MILES_PER_GALLON,
      $dollars_per_kwh = ARCIMOTO_DOLLARS_PER_KWH,
      $vehicle_kwh_per_mile = ARCIMOTO_KWH_PER_MILE_PULSE) {
  $a = $dollars_per_gallon / $current_miles_per_gallon * $miles_per_period;
  $b = $dollars_per_kwh * $vehicle_kwh_per_mile * $miles_per_period;
  
  $savings = $a - $b;
  
  return $savings;
}



function arcimoto_calculator_form($form_state) {

  $form['dollars_per_gallon'] = array(
    '#type' => 'textfield',
    '#prefix' => '<div class="form-row">I pay $',
    '#size' => 1,
    '#suffix' => 'per gallon of gasoline</div>',
    '#maxlength' => 5,
    '#default_value' => _money_format(ARCIMOTO_DOLLARS_PER_GALLON),
  );
  $form['miles_per_period'] = array(
    '#type' => 'textfield',
    '#prefix' => '<div class="form-row">I drive',
    '#size' => 1,
    '#suffix' => 'miles per day</div>',
    '#maxlength' => 5,
    '#default_value' => ARCIMOTO_MILES_PER_DAY,
  );
  $form['current_miles_per_gallon'] = array(
    '#type' => 'textfield',
    '#prefix' => '<div class="form-row">My vehicle gets',
    '#size' => 1,
    '#suffix' => 'miles per gallon</div>',
    '#maxlength' => 5,
    '#default_value' => ARCIMOTO_MILES_PER_GALLON,
  );
  $form['dollars_per_kwh'] = array(
    '#type' => 'textfield',
    '#prefix' => '<div class="form-row">I pay $',
    '#size' => 4,
    '#suffix' => 'per kilowatt-hour (kWh) of electricty</div>',
    '#maxlength' => 6,
    '#default_value' => ARCIMOTO_DOLLARS_PER_KWH,
  );
  $form['hidden'] = array('#type' => 'value', '#value' => 'is_it_here');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Calculate'),
    '#submit' => array('calculator_form_submit'),//none JS version
    '#ahah' => array(
      'event' => 'click',
      'path' => 'arcimoto/ajax',
      'wrapper' => 'calculator-form-results',
      'method' => 'replace',
      'effect' => 'fade',
      'progress' => array(
        'type' => 'throbber',
        //'message' => t('Loading...'),
      ),
    ),
  );
  return $form;
}

function _money_format($number) {
  return number_format($number, 2);
}

function arcimoto_calculator_form_validate($form, $form_state) {
  if (!is_numeric($form_state['values']['dollars_per_gallon'])) {
    form_set_error('', t('You must select a name for this group of settings.'));
  }
}

function arcimoto_menu() {
  $items = array();
  
  $items['arcimoto/ajax'] = array(
    'page callback' => 'arcimoto_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/* Jeremy's orginal

function arcimoto_menu() {
  $items['arcimoto/ajax'] = array(
    'page callback' => 'arcimoto_ajax',
    'access callback' => 'arcimoto_access_callback',
    'access arguments' => array(0),
    'type' => MENU_CALLBACK,
  );
  return $items;
}
*/



function arcimoto_access_callback() {
  return TRUE;
  if(node_access('access content') OR ($user->uid===0)) {
    return TRUE;
  }
  
}

/*
function arcimoto_theme(){
  
  // Adds a template for the user register template
  return array(
    'user_register' => array(
      'arguments' => array('form' => NULL),
      // and if I use a template file, ie: user-register.tpl.php
      'template' => 'user-register',
    ),
  );
}
*/

function arcimoto_form_alter(&$form, &$form_state, $form_id) {

  // Alter the register form
  if ($form_id == 'user_register') {
    arcimoto_user_register_form_alter($form, $form_state, $form_id);
  }
  
  // Alter the user login form
  if ($form_id == 'user_login') {
    arcimoto_user_login_form_alter($form, $form_state, $form_id);
  }

  // Alter the cart form
  if ($form_id == 'uc_cart_view_form' && $form_state['submitted'] == FALSE) {
    // Change the 'update cart' button to read 'update quantity'
    $form['update']['#value'] = 'Update quantity';
  }

  // Alter the checkout form
  if ($form_id == 'uc_cart_checkout_form') {
    arcimoto_checkout_form_alter($form, $form_state, $form_id);
  }
  
  // Alter the comment form
  if($form_id == 'comment_form') {
    arcimoto_comment_form_alter($form, $form_state, $form_id);
  }
  

}

function arcimoto_user_register_form_alter($form, $form_state, $form_id) {
  if($form_state['submitted'] == FALSE) {
    // Move the newletter subscription button into the main fieldset
    $form['account']['simplenews-3'] = $form['simplenews']['simplenews-3'];
    $form['simplenews'] = null;
    $form['account']['simplenews-3']['#default_value'] = 'check';
    
    // Change the max length of the form fields
    $form['account']['name']['#size'] = 35;
    $form['account']['mail']['#size'] = 35;
    
    // Change the descriptions
    $form['account']['name']['#description'] = null; // 'Username or full name. You will log in with the name.';
    $form['account']['mail']['#description'] = null; //'A valid e-mail address. This will not be made public.';
    $form['account']['pass']['#description'] = '';
    $form['account']['simplenews-3']['#title'] = 'Subscribe to the Arcimoto newsletter';
    $form['account']['simplenews-3']['#description'] = 'Roughly one newsletter will be sent out each month';
    
    // Prefill the email if they came to here from the "join a movement" box
    if(!empty($_REQUEST['mail'])) {
      $email = check_plain($_POST['mail']);
      drupal_set_message('Please complete the registration below', 'notice');
      $form['account']['mail']['#default_value'] = $email;
    }
  }
  
}

function arcimoto_user_login_form_alter($form, $form_state, $form_id) {
  if($form_state['submitted'] == FALSE) {
    // Alter the size of the form fields
    $form['name']['#size'] = 35;
    $form['pass']['#size'] = 35;
    
    // Remove the description fields
    $form['name']['#description'] = '';
    $form['pass']['#description'] = '';
  }
}

function arcimoto_checkout_form_alter($form, $form_state, $form_id) {
  if($form_state['submitted'] == FALSE) {
    // Only show delivery to Oregon and Washington
    $states_we_deliver_to = array(
      '' => 'Please select',
      12 => 'California',
      49 => 'Oregon',
      62 => 'Washington'
    );
    $form['panes']['delivery']['delivery_zone']['#options'] = $states_we_deliver_to;
    $form['panes']['delivery']['delivery_zone']['#suffix'] = l('Not on the west coast? Let us know!', 'preorder/outside-sales-area');
    
    
    // Make the billing address not required
    $form['panes']['billing']['billing_first_name']['#required'] = false;
    $form['panes']['billing']['billing_last_name']['#required'] = false;
    $form['panes']['billing']['billing_street1']['#required'] = false;
    $form['panes']['billing']['billing_city']['#required'] = false;
    $form['panes']['billing']['billing_zone']['#required'] = false;
    $form['panes']['billing']['billing_postal_code']['#required'] = false;
    $form['panes']['billing']['billing_phone']['#required'] = false;
    // Make the "my billing is the same..." automatically checked.
    $form['panes']['billing']['copy_address']['#attributes']['checked'] = 'checked';
    //$form['panes']['billing']['copy_address']['#default_value'] == TRUE;
    
    // Change "cart contents" to "order summary"
    $form['panes']['cart']['#title'] = 'Order Summary';
    
    // Add a "change quantity link"
    $form['panes']['cart']['cart_change_quantity'] = array(
          '#value' => '<p class="right">'.l('Order more than one', 'preorder/quantity').'</p>',
          '#weight' => '10'
        );
    
    echo '<pre>';
    //print_r($form);
    echo '</pre>';
    
    $form['panes']['customer']['new_account']['name']['#required'] = true;
    $form['panes']['customer']['new_account']['pass']['#required'] = true;
    $form['panes']['customer']['new_account']['pass_confirm']['#required'] = true;
  }
  
  // Make the form submit to the real checkout page so there is no redirect in the middle (which causes the CC details to be lost
  $form['#action'] = url('cart/checkout');
}

function arcimoto_comment_form_alter($form, $form_state, $form_id) {
  // Make the input form shoter:
  $form['comment_filter']['comment']['#rows'] = 5;
}



function arcimoto_order($op, $arg1, $arg2) {
  switch ($op) {
    case 'load':
        // If the user didn't enter in billing info, copy it from the delivery info
        if(empty($arg1->billing_first_name)&& empty($arg->billing_street1)) {
          copy_delivery_to_billing($arg1);
          
          // Save the order back to the database
          uc_order_save($arg1);
        }
      break;
  }
}

function copy_delivery_to_billing($order) {
    $order->billing_first_name = $order->delivery_first_name;
    $order->billing_last_name = $order->delivery_last_name;
    $order->billing_company = $order->delivery_company;
    $order->billing_street1 = $order->delivery_street1;
    $order->billing_street2 = $order->delivery_street2;
    $order->billing_city = $order->delivery_city;
    $order->billing_zone = $order->delivery_zone;
    $order->billing_postal_code = $order->delivery_postal_code;
    $order->billing_country = $order->delivery_country;
    $order->billing_phone = $order->delivery_phone;
}







function arcimoto_preprocess($vars) {

}

function arcimoto_preprocess_page($vars) {
  /*dpr('foooooo');
  dpr(debug_backtrace());
  echo '<pre>';
  print_r(debug_backtrace());
  echo '</pre>';
  echo 'foo';
  die();*/
  // Hack to get the user and user/register pages to merge
	if ($_GET['q'] == 'user' && !$logged_in) {
    //$vars['template_files'][] = 'page-user-login';
    drupal_goto('user/register');
	}
  
  // Change the "shopping cart" to "modify quantity"
  if($vars['title'] == 'Shopping cart') {
    $vars['title'] = 'Modify quantity';
    $vars['head_title'] = str_replace('Shopping cart', 'Modify quantity', $vars['head_title']);
    
  }
  
}


function is_redirecting_to_checkout() {
  $form_rendered = drupal_get_form('user_login');
  $search_str = 'user/register?destination=cart/checkout"';
  $search_pos = strpos($form_rendered, $search_str);
  $is_redirecting_to_checkout = ($search_pos !== false);
  return $is_redirecting_to_checkout;
}

function arcimoto_preprocess_node($vars) {
  
  // Add ability to theme specific nodes
  $vars['template_files'][] = 'node-' . $vars['nid'];
  return $vars;
}


/*function arcimoto_user_login($form) {
  $output = '';
  // Print out the $form array to see all the elements we are working with.
  $output .= 'BLABLABLBLAAAA';
  $output .= print_r($form);
  // Once I know which part of the array I'm after we can change it.

  // You can use the normal Form API structure to change things, like so:
  // Change the Username field title to Login ID.


  // Make sure you call a drupal_render() on the entire $form to make sure you
  // still output all of the elements (particularly hidden ones needed
  // for the form to function properly.)
  $output .= drupal_render($form);
  return $output;
}*/




/** Allow aggregator items to stick around forever **/
function arcimoto_form_aggregator_admin_settings_alter($form, $form_state) {
    $form['aggregator_clear']['#options'][157784630]  = "Nearly Never aka 5 years";                  
}




/** 
*   Add new Ubercart invoice templates, overriding uc_order_uc_invoice_templates()
**/

function arcimoto_uc_invoice_templates() {
  return array('admin', 'customer', 'wings');
}